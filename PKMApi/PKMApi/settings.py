"""
Django settings for PKMApi project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from datetime import timedelta
from pathlib import Path

from .config import SECRET_KEY
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

from .config import AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_STORAGE_BUCKET_NAME, AWS_S3_ENDPOINT_URL, AWS_S3_REGION_NAME, DEFAULT_FILE_STORAGE, MEDIA_URL

from .config import NAME, USER, PASSWORD, HOST, PORT

AWS_ACCESS_KEY_ID = AWS_ACCESS_KEY_ID
AWS_SECRET_ACCESS_KEY =  AWS_SECRET_ACCESS_KEY
AWS_STORAGE_BUCKET_NAME =  AWS_STORAGE_BUCKET_NAME
AWS_S3_ENDPOINT_URL =  AWS_S3_ENDPOINT_URL
AWS_S3_REGION_NAME =  AWS_S3_REGION_NAME

DEFAULT_FILE_STORAGE = DEFAULT_FILE_STORAGE
MEDIA_URL = MEDIA_URL


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = SECRET_KEY

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# ALLOWED_HOSTS = ["www.api.dev.pkmt.tech", "api.dev.pkmt.tech", "*"]
ALLOWED_HOSTS = ["api.dev.pkmt.tech", "www.api.dev.pkmt.tech", "*"]
CSRF_TRUSTED_ORIGINS = ["http://api.dev.pkmt.tech", "http://www.api.dev.pkmt.tech"]

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Downloaded apps 
    'rest_framework',
    'drf_yasg',

    # Models
    'Core',

    # Created apps
    'BIG_CALENDAR',

    # Login/Logout
    'app_auth',
    'logout',

    # About
    'about',

    # Shift
    'shift',
    'shift_working_day_mode',
    'shift_mode',

    # Company Work Structure 
    'platform_api',
    'department',
    'area',

    # Company personal
    'subdivision',

    # Machines
    'machine_style',
    'machine_group',
]



MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # Custom update last_login
    'PKMApi.middlewares.update_last_login_middleware.UpdateLastLoginMiddleware'
]

ROOT_URLCONF = 'Core.CoreUrls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'PKMApi.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases
import os
from dotenv import load_dotenv

load_dotenv()

Name = NAME
User = USER
Password = PASSWORD
Host = HOST
Port = PORT

if os.getenv('DB_NAME'):
    Name = os.getenv('DB_NAME')
if os.getenv('DB_USER'):
    User = os.getenv('DB_USER')
if os.getenv('DB_PASSWORD'):
    Password = os.getenv('DB_PASSWORD')
if os.getenv('DB_HOST'):
    Host = os.getenv('DB_HOST')
if os.getenv('DB_PORT'):
    Port = os.getenv('DB_PORT')

DATABASES = {
'default':
{
    'ENGINE': 'django.db.backends.postgresql',
    'NAME': Name,
    'USER': User,
    'PASSWORD': Password,
    'HOST': Host,
    'PORT': Port},
}

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'static'

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    # {
    #     'NAME': 'django.contrib.auth.password_validation.' +
    #     'UserAttributeSimilarityValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    # },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'ru-RU'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 100,

    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],

    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
}

# Custom user model
AUTH_USER_MODEL = 'Core.User'

# Settings of token
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=7),
    "REFRESH_TOKEN_LIFETIME": timedelta(minutes=5),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": False,
    "UPDATE_LAST_LOGIN": False,

    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": "",
    "AUDIENCE": None,
    "ISSUER": None,
    "JSON_ENCODER": None,
    "JWK_URL": None,
    "LEEWAY": 0,

    "AUTH_HEADER_TYPES": ("JWT",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",

    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",

    "JTI_CLAIM": "jti",

    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),

    "TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainPairSerializer",
    "TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSerializer",
    "TOKEN_VERIFY_SERIALIZER": "rest_framework_simplejwt.serializers.TokenVerifySerializer",
    "TOKEN_BLACKLIST_SERIALIZER": "rest_framework_simplejwt.serializers.TokenBlacklistSerializer",
    "SLIDING_TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainSlidingSerializer",
    "SLIDING_TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSlidingSerializer",
}

SESSION_COOKIE_AGE = 86400  # 1 день
SESSION_EXPIRE_AT_BROWSER_CLOSE = True  # Сессия заканчивается при закрытии браузера
SESSION_SAVE_EVERY_REQUEST = True  # Сохраняем сессию при каждом запросе

# SWAGGER_SETTINGS = {
#     "DEFAULT_MODEL_RENDERING": "example"
# }

# from pythonjsonlogger.jsonlogger import JsonFormatter
# from app_auth.json_formatters.device_json_formatter import DeviceJsonFormatter
# from app_auth.json_formatters.auth_user_json_formatter import AuthUserJsonFormatter
# from app_auth.json_formatters.auth_group_json_formatter import AuthGroupJsonFormatter

# LOGGING = {
#     "version": 1,
#     "disable_existing_loggers": False,

#     'formatters': {
#         'device_formatter': {
#             '()': DeviceJsonFormatter,
#             'json_ensure_ascii': False,
#             'json_indent': 4,
#         },
#         'auth_user_formater': {
#             '()': AuthUserJsonFormatter,
#             'json_ensure_ascii': False,
#             'json_indent': 4,
#         },
#         'auth_group_formatter': {
#             '()': AuthGroupJsonFormatter,
#             'json_ensure_ascii': False,
#             'json_indent': 4,
#         }
#     },

#     "handlers": {
#         "device_file": {
#             'class': 'logging.FileHandler',
#             'formatter': 'device_formatter',
#             'filename': 'devices.log',
#         },
#         "auth_user_file": {
#             'class': 'logging.FileHandler',
#             'formatter': 'auth_user_formater',
#             'filename': 'auth_users.log',
#         },
#         "auth_group_file": {
#             'class': 'logging.FileHandler',
#             'formatter': 'auth_group_formatter',
#             'filename': 'auth_groups.log',  
#         }
#     },

#     'loggers': {
#         "device": {
#             "handlers": ['device_file'],
#             "level": 'INFO',
#             "propagate": False,
#         },
#         "auth_user": {
#             "handlers": ['auth_user_file'],
#             "level": 'INFO',
#             "propagate": False,
#         },
#         "auth_group":{
#             "handlers": ['auth_group_file'],
#             "level": 'INFO',
#             "propagate": False,
#         }
#     }
    
# }